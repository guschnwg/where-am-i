{"version":3,"sources":["types.ts","context/Maps.tsx","components/StreetView.tsx","components/Guess.tsx","components/Flag.tsx","utils/milliToMinSec.ts","components/Details.tsx","components/Results.tsx","components/Name.tsx","components/Tips.tsx","screens/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Difficulty","random","Random","browserCrypto","MapsContext","React","createContext","MapsContextProvider","Consumer","makeAsyncScriptLoader","globalName","google","children","Provider","value","randomStreetView","lat","real","lng","service","maps","StreetViewService","location","LatLng","Promise","resolve","reject","getPanorama","radius","source","data","latLng","getPlace","difficulty","PLACES","filter","place","pop","useMaps","useContext","streetViewPanoramaOptions","addressControl","showRoadLabels","pov","heading","pitch","zoom","StreetView","coordinates","ref","useRef","useState","instance","setInstance","useEffect","setPosition","StreetViewPanorama","current","style","width","height","Guess","enabled","onGuess","map","setMap","guess","setGuess","setMarker","oldMarker","newMarker","Marker","position","icon","url","mapOptions","minZoom","center","streetViewControl","fullscreenControl","mapTypeControl","zoomControlOptions","ControlPosition","TOP_RIGHT","Map","addListener","className","bottom","left","onClick","Flag","countryCode","size","alt","src","milli","minutes","Math","floor","seconds","Details","onClose","minSec","milliToMinSec","time","maxZoom","zoomControl","name","country","distance","title","wikipedia","GuessResult","Results","history","reduce","agg","crr","key","id","Name","onSubmit","setName","event","preventDefault","htmlFor","onChange","target","Tips","tips","tip","index","GameScreen","setPlace","Date","now","started","setStarted","board","setBoard","setDifficulty","setHistory","finished","setFinished","tryGetPlace","useCallback","undefined","parseFloat","geometry","spherical","computeDistanceBetween","toFixed","App","basename","path","to","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7647943b.chunk.js","sourcesContent":["export interface Google {\n  maps: {\n    StreetViewPanorama: any\n    StreetViewService: any\n    LatLng: any\n    Map: any\n    Marker: any\n    Polyline: any\n    geometry: {\n      spherical: {\n        computeDistanceBetween: any\n      }\n    }\n    event: {\n      clearListeners: any\n    }\n    ControlPosition: {\n      TOP_RIGHT: number\n    }\n  }\n}\n\nexport interface LatLng {\n  lat: () => number\n  lng: () => number\n}\n\nexport interface Point {\n  icon: string\n  position: LatLng\n}\n\nexport interface Coordinates {\n  lat: number\n  lng: number\n}\n\nexport interface Place {\n  id: number\n  name: string\n  country: string\n  countryCode: string\n  description: string\n  wikipedia: string\n  difficulty: Difficulty\n  coordinates: Coordinates\n  tips: string[]\n}\n\nexport interface GameGuess {\n  place: Place\n  coordinates: Coordinates\n  minSec: MinSec\n  time: number\n  distance: number\n}\n\nexport interface MinSec {\n  minutes: number\n  seconds: number\n}\n\nexport enum Difficulty {\n  'Fácil' = 1,\n  'Médio' = 2,\n  'Difícil' = 3,\n}","import React, { useContext } from 'react'\nimport { Random, browserCrypto } from 'random-js'\n// @ts-ignore\nimport makeAsyncScriptLoader from 'react-async-script'\nimport PLACES from '../data/places.json'\nimport { Google, LatLng, Place } from '../types'\n\nconst random = new Random(browserCrypto)\n\nconst API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY\nconst URL = 'https://maps.googleapis.com/maps/api/js?key=' + API_KEY + '&libraries=geometry'\n\ninterface MapsContextProps {\n  google: Google\n}\n\ninterface MapsContextState {\n  google: Google\n  randomStreetView: () => Promise<LatLng>\n  getPlace: (difficulty?: number) => Place\n}\n\n// @ts-ignore\nconst MapsContext = React.createContext<MapsContextState>()\n\nconst MapsContextConsumer = MapsContext.Consumer\nconst MapsContextProvider = makeAsyncScriptLoader(URL, {\n  globalName: 'google',\n})((({ google, children }) => {\n  if (!google) {\n    return <span>Loading...</span>\n  }\n\n  const randomStreetView = () => {\n    const lat = random.real(-60, 77)\n    const lng = random.real(-180, 180)\n  \n    const service = new google.maps.StreetViewService()\n  \n    const location = new google.maps.LatLng(lat, lng)\n  \n    return new Promise((resolve, reject) => {\n      service.getPanorama({\n        location,\n        radius: 1000000,\n        source: 'outdoor',\n      }, (data: any) => {\n        if (data) {\n          resolve(data.location.latLng)\n        } else {\n          reject()\n        }\n      })\n    })\n  }\n\n  const getPlace = (difficulty?: number) => {\n    if (difficulty) {\n      return PLACES.filter(place => place.difficulty === difficulty).pop()\n    }\n    return PLACES.pop()\n  }\n\n  return (\n    <MapsContext.Provider\n      value={{\n        google,\n        randomStreetView,\n        getPlace,\n      }}\n    >\n      {children}\n    </MapsContext.Provider>\n  )\n}) as React.FC<MapsContextProps>)\n\nconst useMaps: () => MapsContextState = () => useContext(MapsContext)\n\nexport {\n  MapsContextProvider,\n  MapsContextConsumer,\n  useMaps,\n}\nexport default MapsContext","import React, { useEffect, useRef, useState, useContext } from 'react'\nimport { Coordinates } from '../types'\nimport MapsContext from '../context/Maps'\n\nconst streetViewPanoramaOptions = {\n  addressControl: false,\n  showRoadLabels: false,\n  pov: {\n    heading: 100,\n    pitch: 0,\n  },\n  zoom: 1,\n}\n\ninterface StreetViewProps {\n  coordinates: Coordinates\n}\n\nconst StreetView: React.FC<StreetViewProps> = ({ coordinates }) => {\n  const { google } = useContext(MapsContext)\n  const ref = useRef(null)\n  const [instance, setInstance] = useState()\n\n  useEffect(() => {\n    if (!instance) {\n      setInstance(new google.maps.StreetViewPanorama(ref.current, streetViewPanoramaOptions))\n    } else {\n      instance.setPosition(coordinates)\n    }\n  }, [google.maps.StreetViewPanorama, instance, coordinates])\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        width: '100%',\n        height: '100%',\n      }}\n    />\n  )\n}\n\nexport default StreetView\n","import React, { useEffect, useRef, useState, useContext } from  'react'\nimport { Coordinates } from '../types'\nimport MapsContext from '../context/Maps'\nimport '../styles/components/Guess.css'\n\ninterface GuessProps {\n  enabled: boolean\n  coordinates: Coordinates\n  onGuess: (guess: Coordinates) => void\n}\n\nconst Guess: React.FC<GuessProps> = ({ enabled, coordinates, onGuess }) => {\n  const { google } = useContext(MapsContext)\n\n  const ref = useRef(null)\n  const [map, setMap] = useState()\n\n  const [guess, setGuess] = useState()\n  const [, setMarker] = useState()\n\n  useEffect(() => {\n    if (guess) {\n      setMarker((oldMarker: any) => {\n        if (oldMarker) {\n          oldMarker.setMap(null)\n        }\n\n        const newMarker = new google.maps.Marker({\n          position: guess,\n          icon: {\n            url: 'http://maps.google.com/mapfiles/ms/icons/red-pushpin.png',\n          },\n        })\n  \n        newMarker.setMap(map)\n\n        return newMarker\n      })\n    }\n  }, [google.maps.Marker, guess, map])\n\n  useEffect(() => {\n    const mapOptions = {\n      zoom: 2,\n      minZoom: 2,\n      center: new google.maps.LatLng(0, 0),\n      streetViewControl: false,\n      fullscreenControl: false,\n      mapTypeControl: false,\n      zoomControlOptions: {\n        position: google.maps.ControlPosition.TOP_RIGHT,\n      },\n    }\n    const map = new google.maps.Map(ref.current, mapOptions)\n\n    map.addListener('click', (data: any) => {\n      setGuess({\n        lat: data.latLng.lat(),\n        lng: data.latLng.lng()\n      })\n    })\n\n    setMap(map)\n  }, [\n    google.maps.Map,\n    google.maps.LatLng,\n    google.maps.ControlPosition.TOP_RIGHT,\n  ])\n\n  return (\n    <div\n      className={`guess-container${enabled ? ' guess-enabled' : ''}`}\n    >\n      <div\n        ref={ref}\n        style={{\n          position: 'relative',\n          height: '100%',\n          width: '100%',\n        }}\n      >\n        {\n          guess && (\n            <button\n              className=\"guess-confirm\"\n              style={{\n                position: 'absolute',\n                bottom: '10px',\n                left: '10px',\n                width: 'calc(100% - 20px)',\n              }}\n              onClick={() => onGuess(guess)}\n            >\n              Confirmar palpite\n            </button>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Guess","import React from 'react'\n\ninterface FlagProps {\n  countryCode: string\n  size: '64' | '32'\n}\n\nconst Flag: React.FC<FlagProps> = ({ countryCode = 'BR', size = '64' }) => {\n  return (\n    <img\n      alt={'Bandeira de ' + countryCode}\n      src={`https://www.countryflags.io/${countryCode}/flat/${size}.png`}\n    />\n  )\n}\n\nexport default Flag\n","export default (milli: number) => {\n    const minutes = Math.floor(milli / 1000 / 60)\n    const seconds = Math.floor((milli - minutes * 1000 * 60) / 1000)\n\n    return {\n        minutes,\n        seconds,\n    }\n}","import React, { useRef, useEffect } from 'react'\nimport { Difficulty, GameGuess } from '../types'\nimport '../styles/components/Details.css'\nimport { useMaps } from '../context/Maps'\nimport Flag from './Flag'\nimport milliToMinSec from '../utils/milliToMinSec'\n\ninterface DetailsProps {\n  guess: GameGuess\n  onClose: () => void\n}\n\nconst Details: React.FC<DetailsProps> = ({ guess, onClose }) => {\n  const { google } = useMaps()\n  const ref = useRef(null)\n  const minSec = milliToMinSec(guess.time)\n\n  useEffect(() => {\n    const mapOptions = {\n      zoom: 0,\n      maxZoom: 0,\n      minZoom: 0,\n      center: new google.maps.LatLng(0, 0),\n      streetViewControl: false,\n      fullscreenControl: false,\n      mapTypeControl: false,\n      zoomControl: false,\n    }\n\n    const map = new google.maps.Map(ref.current, mapOptions)\n\n    const placeMarker = new google.maps.Marker({\n      position: guess.place.coordinates,\n      icon: {\n        url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',\n      },\n    })\n    placeMarker.setMap(map)\n\n    const guessMarker = new google.maps.Marker({\n      position: guess.coordinates,\n      icon: {\n        url: 'http://maps.google.com/mapfiles/ms/icons/red-pushpin.png',\n      },\n    })\n    guessMarker.setMap(map)\n  }, [\n    google.maps.Map,\n    google.maps.LatLng,\n    google.maps.Marker,\n    guess,\n  ])\n\n  return (\n    <div\n      className=\"details-container\"\n    >\n      <div\n        className=\"info-container\"\n      >\n        <div\n          className=\"description-container\"\n        >\n          <Flag\n            countryCode={guess.place.countryCode}\n            size=\"64\"\n          />\n\n          <h2>{guess.place.name} - {guess.place.country}</h2>\n\n          <h3>\n            Foram necessários {minSec.minutes} minuto{ minSec.minutes !== 1 && 's'} e {minSec.seconds} segundo{ minSec.seconds !== 1 && 's'}.  \n          </h3>\n\n          <h4>A distância entre seu palpite e o local correto é de {guess.distance} quilômetros.</h4>\n\n          <h4>Nível: {Difficulty[guess.place.difficulty]}</h4>\n\n          <button\n            onClick={onClose}\n          >\n            Continuar\n          </button>\n        </div>\n\n        <div\n          ref={ref}\n          className=\"map-container\"\n        />\n      </div>\n\n      <iframe\n        className=\"wikipedia-container\"\n        title=\"wikipedia\"\n        src={guess.place.wikipedia}\n      ></iframe>\n    </div>\n    )\n  }\n  \n  export default Details\n  ","import React, { useEffect, useRef } from 'react'\nimport { GameGuess } from '../types'\nimport '../styles/components/Results.css'\nimport milliToMinSec from '../utils/milliToMinSec'\nimport Flag from './Flag'\nimport { useMaps } from '../context/Maps'\n\ninterface GuessResult {\n  guess: GameGuess\n}\n\nconst GuessResult: React.FC<GuessResult> = ({ guess }) => {\n  const { google } = useMaps()\n  const ref = useRef(null)\n\n  const minSec = milliToMinSec(guess.time)\n\n  useEffect(() => {\n    const mapOptions = {\n      zoom: 0,\n      maxZoom: 0,\n      minZoom: 0,\n      center: new google.maps.LatLng(0, 0),\n      streetViewControl: false,\n      fullscreenControl: false,\n      mapTypeControl: false,\n      zoomControl: false,\n    }\n\n    const map = new google.maps.Map(ref.current, mapOptions)\n\n    const placeMarker = new google.maps.Marker({\n      position: guess.place.coordinates,\n      icon: {\n        url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',\n      },\n    })\n    placeMarker.setMap(map)\n\n    const guessMarker = new google.maps.Marker({\n      position: guess.coordinates,\n      icon: {\n        url: 'http://maps.google.com/mapfiles/ms/icons/red-pushpin.png',\n      },\n    })\n    guessMarker.setMap(map)\n  }, [\n    google.maps.Map,\n    google.maps.LatLng,\n    google.maps.Marker,\n    guess,\n  ])\n\n  return (\n    <div\n      className=\"place-container\"\n    >\n      <h3>{guess.place.name} - {guess.place.country}</h3>\n\n      <Flag\n        countryCode={guess.place.countryCode}\n        size=\"32\"\n      />\n\n      <p>\n        Distância: {guess.distance} quilômetros.\n      </p>\n\n      <p>\n        Tempo: {minSec.minutes} minuto{ minSec.minutes !== 1 && 's'} e {minSec.seconds} segundo{ minSec.seconds !== 1 && 's'}.\n      </p>\n\n      <div\n        ref={ref}\n        className=\"map-container\"\n      />\n    </div>\n  )\n}\n\ninterface ResultsProps {\n  name: string\n  history: GameGuess[]\n}\n\nconst Results: React.FC<ResultsProps> = ({ name, history }) => {\n  const minSec = milliToMinSec(history.reduce<number>((agg, crr) => agg + crr.time, 0))\n  const distance = history.reduce<number>((agg, crr) => agg + crr.distance, 0)\n\n  return (\n    <div\n      className=\"results-container\"\n    >\n      <h2>Fim de jogo, {name}!</h2>\n\n      <p>Foram necessários {minSec.minutes} minutos e {minSec.seconds} segundos.</p>\n\n      <p>A distância total entre os palpites e os locais foi de {distance} quilômetros.</p>\n\n      <div\n        className=\"places-container\"\n      >\n        {history.map(guess => (\n          <GuessResult\n            key={guess.place.id}\n            guess={guess}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Results\n","import React, { useState } from 'react'\nimport '../styles/components/Name.css'\n\ninterface NameProps {\n  onSubmit: (name: string) => void\n}\n\nconst Name: React.FC<NameProps> = ({ onSubmit }) => {\n  const [name, setName] = useState('')\n\n  return (\n    <div\n      className=\"name-container\"\n    >\n      <form\n        onSubmit={event => {\n          event.preventDefault()\n          onSubmit(name)\n        }}\n      >\n        <label htmlFor=\"name\">\n          Qual o seu nome?\n        </label>\n\n        <input\n          id=\"name\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n\n        <button>\n          Confirmar\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default Name\n","import React from 'react'\nimport '../styles/components/Tips.css'\n\ninterface TipsProps {\n  enabled: boolean\n  tips?: string[]\n}\n\nconst Tips: React.FC<TipsProps> = ({ enabled, tips }) => {\n  return (\n    <div\n      className={`tips-container${enabled ? ' tips-enabled' : ''}`}\n    >\n      <h2>\n        Dicas\n      </h2>\n\n      {tips && (\n        <div\n          className=\"list-container\"\n        >\n          <ol>\n            {\n              tips.map((tip, index) => (\n                <li\n                  key={index}\n                >\n                  {tip}\n                </li>\n              ))\n            }\n          </ol>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Tips","import React, { useState, useEffect, useCallback } from 'react'\nimport StreetView from '../components/StreetView'\nimport Guess from '../components/Guess'\nimport Details from '../components/Details'\nimport Results from '../components/Results'\nimport Name from '../components/Name'\nimport { useMaps } from '../context/Maps'\nimport '../styles/screens/Game.css'\nimport Tips from '../components/Tips'\nimport { Place, Coordinates, GameGuess } from '../types'\n\nconst GameScreen: React.FC = () => {\n  const { getPlace, google } = useMaps()\n\n  const [name, setName] = useState('')\n\n  const [place, setPlace] = useState<Place>()\n  const [guess, setGuess] = useState<GameGuess>()\n\n  const [started, setStarted] = useState(Date.now())\n\n  const [board, setBoard] = useState('')\n  const [difficulty, setDifficulty] = useState(1)\n\n  const [history, setHistory] = useState<GameGuess[]>([])\n  const [finished, setFinished] = useState(false)\n\n  const tryGetPlace = useCallback((difficulty: number) => {\n    const place = getPlace(difficulty)\n  \n    if (place) {\n      setPlace(place)\n    }\n  }, [getPlace])\n\n  const handleGuess = (coordinates: Coordinates) => {\n    const time = Date.now() - started\n    const minutes = Math.floor(time/ 1000 / 60)\n    const seconds = Math.floor(((time - minutes) * 60))\n    const distance = parseFloat((google.maps.geometry.spherical.computeDistanceBetween(\n      new google.maps.LatLng(coordinates),\n      new google.maps.LatLng(place!.coordinates)\n    ) / 1000).toFixed(2))\n\n    const guess: GameGuess = {\n      minSec: {\n        minutes,\n        seconds,\n      },\n      time,\n      place: place!,\n      coordinates,\n      distance,\n    }\n\n    setGuess(guess)\n  }\n\n  const handleNext = () => {\n    setHistory(current => {\n      return [\n        ...current,\n        guess!,\n      ]\n    })\n    setBoard('')\n    setGuess(undefined)\n\n    if (difficulty === 3) {\n      setFinished(true)\n    } else {\n      setStarted(Date.now())\n      setDifficulty(current => current + 1)\n    }\n  }\n\n  useEffect(() => {\n    tryGetPlace(difficulty)\n  }, [tryGetPlace, difficulty])\n\n  if (!name) {\n    return (\n      <Name\n        onSubmit={setName}\n      />\n    )\n  }\n\n  if (!place) {\n    return (\n      <div>\n        Loading...\n      </div>\n    )\n  }\n\n  if (finished) {\n    return (\n      <Results\n        name={name}\n        history={history}\n      />\n    )\n  }\n\n  if (guess) {\n    return (\n      <Details\n        guess={guess}\n        onClose={handleNext}\n      />\n    )\n  }\n\n  return (\n    <div\n      className=\"container\"\n    >\n      <div\n        className=\"board-enable-container\"\n      >\n        <button\n          className=\"guess-enable\"\n          onClick={() => setBoard(current => current === 'Guess' ? '' : 'Guess')}\n        >\n          { board === 'Guess' ? 'Navegar mais' : 'Dar palpite' }\n        </button>\n\n        <button\n          className=\"tips-enable\"\n          onClick={() => setBoard(current => current === 'Tips' ? '' : 'Tips')}\n        >\n          { board === 'Tips' ? 'Esconder dicas' : 'Mostrar dicas' }\n        </button>\n      </div>\n\n      <StreetView\n        coordinates={place.coordinates}\n      />\n\n      <Guess\n        enabled={board === 'Guess'}\n        coordinates={place.coordinates}\n        onGuess={handleGuess}\n      />\n\n      <Tips\n        enabled={board === 'Tips'}\n        tips={place.tips}\n      />\n    </div>\n  )\n}\n\nexport default GameScreen\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  // @ts-ignore\n} from 'react-router-dom'\nimport GameScreen from './screens/Game'\nimport { MapsContextProvider } from './context/Maps'\n\nconst App: React.FC = () => {\n  return (\n    <MapsContextProvider>\n      <Router\n        basename=\"/where-am-i\"\n      >\n        <Switch>\n          <Route path=\"/guessing\">\n            <GameScreen />\n          </Route>\n          <Route path=\"/\">\n            <Link to=\"/guessing\">Guessing game</Link>\n          </Route>\n        </Switch>\n      </Router>\n    </MapsContextProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}