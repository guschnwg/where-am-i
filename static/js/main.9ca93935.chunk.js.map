{"version":3,"sources":["context/Maps.tsx","components/StreetView.tsx","components/Guess.tsx","screens/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MapsContext","React","createContext","MapsContextProvider","Consumer","makeAsyncScriptLoader","globalName","google","children","Provider","value","streetViewPanoramaOptions","addressControl","addressControlOptions","showRoadLabels","disableDefaultUI","pov","heading","pitch","zoom","StreetView","coordinates","useContext","ref","useRef","useState","instance","setInstance","useEffect","setPosition","maps","StreetViewPanorama","current","style","height","Guess","point","onGuessed","map","setMap","guess","setGuess","marker","setMarker","newGuess","Marker","position","mapOptions","center","LatLng","streetViewControl","fullscreenControl","Map","addListener","data","latLng","defaultSize","width","minHeight","minWidth","bottom","left","onClick","Polyline","path","distance","geometry","spherical","computeDistanceBetween","label","toFixed","icon","random","Random","browserCrypto","GameScreen","setCoordinates","points","setPoints","tryRandomPlace","lat","real","lng","service","StreetViewService","location","getPanorama","radius","source","display","backgroundColor","right","zIndex","top","App","Game","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ca93935.chunk.js","sourcesContent":["import React, { useContext } from 'react'\n// @ts-ignore\nimport makeAsyncScriptLoader from 'react-async-script'\nimport { Google } from '../types'\n\nconst API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY\nconst URL = 'https://maps.googleapis.com/maps/api/js?key=' + API_KEY\n\ninterface MapsContextState {\n  google: Google\n}\n\n// @ts-ignore\nconst MapsContext = React.createContext<MapsContextState>()\n\nconst _MapsContextProvider: React.FC<MapsContextState> = ({ google, children }) => {\n  if (!google) {\n    return <span>Loading...</span>\n  }\n\n  return (\n    <MapsContext.Provider\n      value={{\n        google,\n      }}\n    >\n      {children}\n    </MapsContext.Provider>\n  )\n}\n\nconst MapsContextConsumer = MapsContext.Consumer\nconst MapsContextProvider = makeAsyncScriptLoader(URL, {\n  globalName: 'google',\n})(_MapsContextProvider)\n\nconst useMaps = () => useContext(MapsContext)\n\nexport {\n  MapsContextProvider,\n  MapsContextConsumer,\n  useMaps,\n}\nexport default MapsContext","import React, { useEffect, useRef, useState, useContext } from 'react'\nimport { LatLng } from '../types'\nimport MapsContext from '../context/Maps'\n\nconst streetViewPanoramaOptions = {\n  addressControl: false,\n  addressControlOptions: false,\n  showRoadLabels: false,\n  disableDefaultUI: true,\n  pov: {\n    heading: 100,\n    pitch: 0,\n  },\n  zoom: 1,\n}\n\ninterface StreetViewProps {\n  coordinates: LatLng\n}\n\nconst StreetView: React.FC<StreetViewProps> = ({ coordinates }) => {\n  const { google } = useContext(MapsContext)\n  const ref = useRef(null)\n  const [instance, setInstance] = useState()\n\n  useEffect(() => {\n    if (!instance) {\n      setInstance(new google.maps.StreetViewPanorama(ref.current, streetViewPanoramaOptions))\n    } else {\n      instance.setPosition(coordinates)\n    }\n  }, [google.maps.StreetViewPanorama, instance, coordinates])\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        height: '100%',\n      }}\n    />\n  )\n}\n\nexport default StreetView\n","import React, { useEffect, useRef, useState, useContext } from  'react'\nimport { Resizable } from 're-resizable'\nimport { Point } from '../types'\nimport MapsContext from '../context/Maps'\n\ninterface GuessProps {\n  point: Point\n  onGuessed: () => void\n}\n\nconst Guess: React.FC<GuessProps> = ({ point, onGuessed }) => {\n  const { google } = useContext(MapsContext)\n\n  const ref = useRef(null)\n  const [map, setMap] = useState()\n\n  const [guess, setGuess] = useState()\n  const [marker, setMarker] = useState()\n\n  useEffect(() => {\n    if (guess) {\n      if (marker) {\n        marker.setMap(null)\n      }\n\n      const newGuess = new google.maps.Marker({\n        position: guess,\n      })\n\n      newGuess.setMap(map)\n\n      setMarker(newGuess)\n    }\n  }, [google.maps.Marker, guess, map])\n  \n  useEffect(() => {\n    if (!map) {\n      const center = new google.maps.LatLng(0, 0)\n      const mapOptions = {\n        zoom: 1,\n        center,\n        streetViewControl: false,\n        fullscreenControl: false,\n      }\n      const map = new google.maps.Map(ref.current, mapOptions)\n\n      map.addListener('click', (data: any) => {\n        setGuess(data.latLng)\n      })\n\n      setMap(map)\n    }\n  }, [google.maps.Map, google.maps.LatLng, google.maps.Marker, map])\n\n  const handleConfirmGuess = () => {\n    marker.setMap(null)\n\n    const line = new google.maps.Polyline({\n      path: [\n        guess,\n        point,\n      ],\n    })\n    line.setMap(map)\n\n    const distance = google.maps.geometry.spherical.computeDistanceBetween(guess, point)\n\n    const correctMarker = new google.maps.Marker({\n      position: point,\n      label: `Distance: ${(distance / 1000).toFixed(2)}km`,\n      icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',\n    })\n    correctMarker.setMap(map)\n\n    const guessMarker = new google.maps.Marker({\n      position: guess,\n      label: 'You guessed',\n      icon: 'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png',\n    })\n    guessMarker.setMap(map)\n\n    onGuessed()\n  }\n\n  return (\n    <Resizable\n      defaultSize={{\n        width: 320,\n        height: 200,\n      }}\n      minHeight={200}\n      minWidth={200}\n    >\n      <div\n        style={{\n          position: 'relative',\n          height: '90%',\n        }}\n        >\n        <div\n          ref={ref}\n          style={{\n            height: '100%',\n          }}\n          />\n\n        <button\n          style={{\n            position: 'absolute',\n            bottom: '-10%',\n            left: '10px',\n            width: 'calc(100% - 20px)',\n            height: '10%',\n          }}\n          onClick={handleConfirmGuess}\n          >\n          Confirm guess\n        </button>\n      </div>\n    </Resizable>\n  )\n}\n\nexport default Guess","import React, { useState, useContext } from 'react'\nimport { Random, browserCrypto } from 'random-js'\nimport StreetView from '../components/StreetView'\nimport Guess from '../components/Guess'\nimport MapsContext from '../context/Maps'\n\nconst random = new Random(browserCrypto)\n\nconst GameScreen: React.FC = () => {\n  const { google } = useContext(MapsContext)\n\n  const [coordinates, setCoordinates] = useState(new google.maps.LatLng(-13.1630646, -72.5448514))\n  const [points, setPoints] = useState([{\n    position: coordinates,\n    icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',\n  }])\n\n  const tryRandomPlace = () => {\n    const lat = random.real(-90, 90)\n    const lng = random.real(-180, 180)\n\n    const service = new google.maps.StreetViewService()\n\n    const location = new google.maps.LatLng(lat, lng)\n\n    service.getPanorama({\n      location,\n      radius: 1000000,\n      source: 'outdoor',\n    }, (data: any) => {\n      if (data) {\n        setPoints([\n          ...points,\n          {\n            position: data.location.latLng,\n            icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',\n          },\n          {\n            position: location,\n            icon: 'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png',\n          },\n        ])\n        setCoordinates(data.location.latLng)\n      } else {\n        setPoints([\n          ...points,\n          {\n            position: location,\n            icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',\n          },\n        ])\n        tryRandomPlace()\n      }\n    })\n  }\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        display: 'flex',\n      }}\n    >\n      <div\n        style={{\n          width: '100vw',\n          height: '100vh',\n          backgroundColor: '#eeeeee',\n        }}\n      >\n        <StreetView\n          coordinates={coordinates}\n        />\n      </div>\n\n      <div\n        style={{\n          backgroundColor: '#eeeeee',\n          position: 'absolute',\n          right: '20px',\n          bottom: '20px',\n          zIndex: 2,\n        }}\n      >\n        <Guess\n          point={coordinates}\n          onGuessed={tryRandomPlace}\n        />\n      </div>\n\n      <button\n        style={{\n          position: 'absolute',\n          top: '10%',\n          left: '10%',\n          zIndex: 2,\n        }}\n        onClick={tryRandomPlace}\n      >\n        Random place\n      </button>\n    </div>\n  )\n}\n\nexport default GameScreen\n","import React from 'react'\nimport GameScreen from './screens/Game'\nimport { MapsContextProvider } from './context/Maps'\n\nconst App: React.FC = () => {\n  return (\n    <MapsContextProvider>\n      <GameScreen />\n    </MapsContextProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}