{"version":3,"sources":["context/Maps.tsx","components/StreetView.tsx","components/Guess.tsx","screens/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["random","Random","browserCrypto","MapsContext","React","createContext","MapsContextProvider","Consumer","makeAsyncScriptLoader","globalName","google","children","Provider","value","randomStreetView","lat","real","lng","service","maps","StreetViewService","location","LatLng","Promise","resolve","reject","getPanorama","radius","source","data","latLng","streetViewPanoramaOptions","addressControl","showRoadLabels","pov","heading","pitch","zoom","StreetView","coordinates","useContext","ref","useRef","useState","instance","setInstance","useEffect","setPosition","StreetViewPanorama","current","style","width","height","backgroundColor","Guess","point","onGuessed","map","setMap","guess","setGuess","marker","setMarker","oldMarker","newMarker","Marker","position","mapOptions","center","streetViewControl","fullscreenControl","mapTypeControl","Map","addListener","left","bottom","zIndex","border","defaultSize","minHeight","minWidth","maxHeight","maxWidth","onClick","Polyline","path","distance","geometry","spherical","computeDistanceBetween","label","toFixed","icon","GameScreen","setCoordinates","tryRandomPlace","useCallback","then","catch","display","top","right","App","Game","to","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c2886ea.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport { Random, browserCrypto } from 'random-js'\n// @ts-ignore\nimport makeAsyncScriptLoader from 'react-async-script'\nimport { Google, LatLng } from '../types'\n\nconst random = new Random(browserCrypto)\n\nconst API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY\nconst URL = 'https://maps.googleapis.com/maps/api/js?key=' + API_KEY\n\ninterface MapsContextProps {\n  google: Google\n}\n\ninterface MapsContextState {\n  google: Google\n  randomStreetView: () => Promise<LatLng>\n}\n\n// @ts-ignore\nconst MapsContext = React.createContext<MapsContextState>()\n\nconst MapsContextConsumer = MapsContext.Consumer\nconst MapsContextProvider = makeAsyncScriptLoader(URL, {\n  globalName: 'google',\n})((({ google, children }) => {\n  if (!google) {\n    return <span>Loading...</span>\n  }\n\n  const randomStreetView = () => {\n    const lat = random.real(-60, 77)\n    const lng = random.real(-180, 180)\n  \n    const service = new google.maps.StreetViewService()\n  \n    const location = new google.maps.LatLng(lat, lng)\n  \n    return new Promise((resolve, reject) => {\n      service.getPanorama({\n        location,\n        radius: 1000000,\n        source: 'outdoor',\n      }, (data: any) => {\n        if (data) {\n          resolve(data.location.latLng)\n        } else {\n          reject()\n        }\n      })\n    })\n  }\n\n  return (\n    <MapsContext.Provider\n      value={{\n        google,\n        randomStreetView,\n      }}\n    >\n      {children}\n    </MapsContext.Provider>\n  )\n}) as React.FC<MapsContextProps>)\n\nconst useMaps = () => useContext(MapsContext)\n\nexport {\n  MapsContextProvider,\n  MapsContextConsumer,\n  useMaps,\n}\nexport default MapsContext","import React, { useEffect, useRef, useState, useContext } from 'react'\nimport { LatLng } from '../types'\nimport MapsContext from '../context/Maps'\n\nconst streetViewPanoramaOptions = {\n  addressControl: false,\n  showRoadLabels: false,\n  pov: {\n    heading: 100,\n    pitch: 0,\n  },\n  zoom: 1,\n}\n\ninterface StreetViewProps {\n  coordinates: LatLng\n}\n\nconst StreetView: React.FC<StreetViewProps> = ({ coordinates }) => {\n  const { google } = useContext(MapsContext)\n  const ref = useRef(null)\n  const [instance, setInstance] = useState()\n\n  useEffect(() => {\n    if (!instance) {\n      setInstance(new google.maps.StreetViewPanorama(ref.current, streetViewPanoramaOptions))\n    } else {\n      instance.setPosition(coordinates)\n    }\n  }, [google.maps.StreetViewPanorama, instance, coordinates])\n\n  return (\n    <div\n      style={{\n        width: '100%',\n        height: '100%',\n        backgroundColor: '#eeeeee',\n      }}\n    >\n      <div\n        ref={ref}\n        style={{\n          height: '100%',\n        }}\n      />\n    </div>\n  )\n}\n\nexport default StreetView\n","import React, { useEffect, useRef, useState, useContext } from  'react'\nimport { Resizable } from 're-resizable'\nimport { Point } from '../types'\nimport MapsContext from '../context/Maps'\n\ninterface GuessProps {\n  point: Point\n  onGuessed: () => void\n}\n\nconst Guess: React.FC<GuessProps> = ({ point, onGuessed }) => {\n  const { google } = useContext(MapsContext)\n\n  const ref = useRef(null)\n  const [map, setMap] = useState()\n\n  const [guess, setGuess] = useState()\n  const [marker, setMarker] = useState()\n\n  useEffect(() => {\n    if (guess) {\n      setMarker((oldMarker: any) => {\n        if (oldMarker) {\n          oldMarker.setMap(null)\n        }\n\n        const newMarker = new google.maps.Marker({\n          position: guess,\n        })\n  \n        newMarker.setMap(map)\n\n        return newMarker\n      })\n    }\n  }, [google.maps.Marker, guess, map])\n\n  useEffect(() => {\n    if (!map) {\n      const center = new google.maps.LatLng(0, 0)\n      const mapOptions = {\n        zoom: 1,\n        center,\n        streetViewControl: false,\n        fullscreenControl: false,\n        mapTypeControl: false,\n      }\n      const map = new google.maps.Map(ref.current, mapOptions)\n\n      map.addListener('click', (data: any) => {\n        setGuess(data.latLng)\n      })\n\n      setMap(map)\n    }\n  }, [google.maps.Map, google.maps.LatLng, google.maps.Marker, map])\n\n  const handleConfirmGuess = () => {\n    marker.setMap(null)\n\n    const line = new google.maps.Polyline({\n      path: [\n        guess,\n        point,\n      ],\n    })\n    line.setMap(map)\n\n    const distance = google.maps.geometry.spherical.computeDistanceBetween(guess, point)\n\n    const correctMarker = new google.maps.Marker({\n      position: point,\n      label: `Distance: ${(distance / 1000).toFixed(2)}km`,\n      icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',\n    })\n    correctMarker.setMap(map)\n\n    const guessMarker = new google.maps.Marker({\n      position: guess,\n      label: 'You guessed',\n      icon: 'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png',\n    })\n    guessMarker.setMap(map)\n\n    onGuessed()\n  }\n\n  return (\n    <div\n      style={{\n        backgroundColor: '#eeeeee',\n        position: 'absolute',\n        left: '2vw',\n        bottom: '20px',\n        zIndex: 2,\n        border: '2px solid red',\n      }}\n    >\n      <Resizable\n        defaultSize={{\n          width: 320,\n          height: 200,\n        }}\n        minHeight={200}\n        minWidth={200}\n        maxHeight=\"30vh\"\n        maxWidth=\"96vw\"\n      >\n        <div\n          style={{\n            position: 'relative',\n            height: '100%',\n          }}\n        >\n          <div\n            ref={ref}\n            style={{\n              height: '100%',\n            }}\n          />\n\n          {\n            guess && (\n              <button\n                style={{\n                  position: 'absolute',\n                  bottom: '0',\n                  left: '10px',\n                  width: 'calc(100% - 20px)',\n                  height: '20px',\n                }}\n                onClick={handleConfirmGuess}\n                >\n                Confirm guess\n              </button>\n            )\n          }\n        </div>\n      </Resizable>\n    </div>\n  )\n}\n\nexport default Guess","import React, { useState, useContext, useEffect, useCallback } from 'react'\nimport StreetView from '../components/StreetView'\nimport Guess from '../components/Guess'\nimport MapsContext from '../context/Maps'\n\nconst GameScreen: React.FC = () => {\n  const { randomStreetView } = useContext(MapsContext)\n  const [coordinates, setCoordinates] = useState()\n\n  const tryRandomPlace = useCallback(() => {\n    randomStreetView().then(setCoordinates).catch(tryRandomPlace)\n  }, [randomStreetView])\n\n  useEffect(() => {\n    tryRandomPlace()\n  }, [tryRandomPlace])\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        position: 'fixed',\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n      }}\n    >\n      <StreetView\n        coordinates={coordinates}\n      />\n\n      <Guess\n        point={coordinates}\n        onGuessed={tryRandomPlace}\n      />\n    </div>\n  )\n}\n\nexport default GameScreen\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  // @ts-ignore\n} from 'react-router-dom'\nimport GameScreen from './screens/Game'\nimport { MapsContextProvider } from './context/Maps'\n\nconst App: React.FC = () => {\n  return (\n    <MapsContextProvider>\n      <Router>\n        <Switch>\n          <Route path=\"/guessing\">\n            <GameScreen />\n          </Route>\n          <Route path=\"/\">\n            <Link to=\"/guessing\">Guessing game</Link>\n          </Route>\n        </Switch>\n      </Router>\n    </MapsContextProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}